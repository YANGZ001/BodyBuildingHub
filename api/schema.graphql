scalar GraphQLDate

type Log {
  _id: ID!
  id: Int!
  type: String!
  reps: Int!
  number: Int!
  unit: String
  note: String
  created: GraphQLDate!
}

type Video {
  _id: ID!
  id: Int!
  vId: String!
  vName: String!
  added: GraphQLDate!
  vComments: [Comment]
}

type Comment {
  cId: Int!
  body: String!
  username: String!
  userId: Int!
  parentId: Int
  created: GraphQLDate!
}

type User {
  _id: ID!
  id: Int!
  aType: String!
  username: String!
  password: String
  firstname: String!
  lastname: String!
  created: GraphQLDate!
}

input UserInput {
  username: String!
  password: String!
  firstname: String!
  lastname: String!
}

"Toned down Issue, used as inputs, without server generated values."
input LogInputs {
  type: String!
  "Optional, if not supplied, will be set to 'New'"
  reps: Int!
  number: Int!
  unit: String
  note: String
  created: GraphQLDate
}

##### Top level declarations

type Query {
  logList: [Log!]!
  vidList(vType: String!): [Video!]!
  searchDB(vType: String!, text: String!): [Video]!
}

type Mutation {
  logAdd(log: LogInputs!): Log!
  logDelete(id: Int!): Int
  createUser(user: UserInput!): User!
}
